name: Install aqua
description: Install aqua https://aquaproj.github.io/ and install tools with aqua
inputs:
  aqua_version:
    description: installed aqua's version (e.g. v0.8.7)
    required: true
  enable_aqua_install:
    required: false
    default: "true"
  aqua_opts:
    required: false
    default: "-l"
  policy_allow:
    required: false
    description: |
      aqua >= v2.3.0
      If this isn't empty, "aqua policy allow" is run.
      If this is "true", "aqua policy allow" is run without argument.
      If this isn't empty and isn't "true", "aqua policy allow <inputs.policy_allow>" is run.

  working_directory:
    required: false
    default: ""
runs:
  using: composite
  steps:
    - run: |
        echo "::error ::aqua_version is required. https://github.com/aquaproj/aqua-installer"
        exit 1
      shell: bash
      if: inputs.aqua_version == ''

    - run: echo "${AQUA_ROOT_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/aquaproj-aqua}/bin" >> $GITHUB_PATH
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      if: inputs.enable_aqua_install == 'true' && runner.os != 'Windows'

    - run: |
        echo "${AQUA_ROOT_DIR:-$HOME/AppData/Local/aquaproj-aqua}/bin" >> $GITHUB_PATH
        echo "${AQUA_ROOT_DIR:-$HOME/AppData/Local/aquaproj-aqua}/bat" >> $GITHUB_PATH
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      if: inputs.enable_aqua_install == 'true' && runner.os == 'Windows'

    - run: |
        $(if($env:AQUA_ROOT_DIR) {echo $env:AQUA_ROOT_DIR} else {echo "$HOME/AppData/Local/aquaproj-aqua/bin"}) | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        $(if($env:AQUA_ROOT_DIR) {echo $env:AQUA_ROOT_DIR} else {echo "$HOME/AppData/Local/aquaproj-aqua/bat"}) | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      shell: pwsh
      working-directory: ${{ inputs.working_directory }}
      if: inputs.enable_aqua_install == 'true' && runner.os == 'Windows'

    # Copy aqua-installer in action.
    # https://github.com/aquaproj/aqua-installer/issues/461
    # https://github.com/actions/runner/issues/2185
    - run: |
        set -eu
        set -o pipefail

        uname_os() {
          local os
          os=$(uname -s | tr '[:upper:]' '[:lower:]')
          case "$os" in
            cygwin_nt*) os="windows" ;;
            mingw*) os="windows" ;;
            msys_nt*) os="windows" ;;
          esac
          echo "$os"
        }

        uname_arch() {
          local arch
          arch=$(uname -m)
          case $arch in
            x86_64) arch="amd64" ;;
            aarch64) arch="arm64" ;;
          esac
          echo ${arch}
        }

        OS="$(uname_os)"
        ARCH="$(uname_arch)"

        install_path=${AQUA_ROOT_DIR:-${XDG_DATA_HOME:-$HOME/.local/share}/aquaproj-aqua}/bin/aqua
        if [ "$OS" = windows ]; then
          install_path=${AQUA_ROOT_DIR:-$HOME/AppData/Local/aquaproj-aqua}/bin/aqua.exe
        fi

        bootstrap_version=v2.16.4
        checksums="34ad1e7f88e6fcc13f3bed2e7470ab570c4440aaa441e1b545cc514c571e9a2f  aqua_darwin_arm64.tar.gz
        468c6c51f37196e6c21a096498eb4d3f7ba5cea3593b44af89087f571c207bc9  aqua_windows_amd64.tar.gz
        6c2b6165000f3f2c5f04bbb52c8fe97b686cfbaa80493d866ad6770400b1773e  aqua_linux_arm64.tar.gz
        7457ea4870f953de17c68fe8f86b3243c14890aa94a05e713d3c22ef401968b2  aqua_linux_amd64.tar.gz
        c49f010e7e731ed62e7289169162001413f319cb593250a525aae26ee4551c3f  aqua_darwin_amd64.tar.gz
        dcbc4c160827187504994a8f2ec4b5b7944a05da48b011de7a6cade9becd14e5  aqua_windows_arm64.tar.gz"

        filename=aqua_${OS}_${ARCH}.tar.gz
        URL=https://github.com/aquaproj/aqua/releases/download/$bootstrap_version/$filename

        tempdir=$(mktemp -d)
        echo "===> Installing aqua $bootstrap_version for bootstrapping..." >&2
        echo "===> Downloading $URL ..." >&2
        curl --fail -L "$URL" -o "$tempdir/$filename"

        cd "$tempdir"

        echo "===> Verifying checksum of aqua $bootstrap_version ..." >&2
        if command -v sha256sum > /dev/null 2>&1; then
          echo "$checksums" | grep "$filename" | sha256sum -c
        elif command -v shasum > /dev/null 2>&1; then
          echo "$checksums" | grep "$filename" | shasum -a 256 -c
        else
          echo "Skipped checksum verification of aqua $bootstrap_version, because both sha256sum and shasum aren't found" >&2
        fi

        tar xvzf "$filename" > /dev/null
        chmod a+x aqua
        if [ -n "${AQUA_VERSION:-}" ]; then
          echo "===> $tempdir/aqua update-aqua $AQUA_VERSION" >&2
          ./aqua update-aqua "$AQUA_VERSION"
        else
          echo "===> $tempdir/aqua update-aqua" >&2
          ./aqua update-aqua
        fi

        "$install_path" -v

        rm -R "$tempdir"
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      env:
        AQUA_VERSION: ${{ inputs.aqua_version }}

    - run: aqua policy allow
      working-directory: ${{ inputs.working_directory }}
      if: inputs.policy_allow == 'true'
      shell: bash

    - run: aqua policy allow "$POLICY_FILE"
      working-directory: ${{ inputs.working_directory }}
      if: |
        inputs.policy_allow != 'true' && inputs.policy_allow != ''
      shell: bash
      env:
        POLICY_FILE: ${{ inputs.policy_allow }}

    - run: aqua i $AQUA_OPTS
      working-directory: ${{ inputs.working_directory }}
      shell: bash
      env:
        AQUA_OPTS: ${{ inputs.aqua_opts }}
